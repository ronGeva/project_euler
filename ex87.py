from progressbar import ProgressBar
from pe_useful import get_all_primes
from math import ceil, sqrt

LIMIT = 50000000


def get_sum(square, cube, fourth):
	"""
	:return: square^2 + cube^3 + fourth^4
	"""
	return pow(square, 2) + pow(cube, 3) + pow(fourth, 4)


def is_valid_trio(square, cube, fourth):
	return get_sum(square, cube, fourth) < LIMIT


def generate_all_trios():
	"""
	Generates all the trios of square, cube, fourth.
	Each one of those is a prime number, so that square^2 + cube^3 + fourth^4
	will be no bigger than LIMIT.
	:return: A list containing all the trios.
	"""
	trios = []
	primes = get_all_primes(int(sqrt(LIMIT)) + 1)
	primes.remove(1) #  question does not treat 1 as prime
	cube_limit = int(ceil(pow(LIMIT, 1 / 3.0)))
	fourth_limit = int(ceil(pow(LIMIT, 0.25)))
	bar = ProgressBar()
	for square in bar(primes):
		for cube in primes[:cube_limit]:
			for fourth in primes[:fourth_limit]:
				if is_valid_trio(square, cube, fourth):
					trios.append((square, cube, fourth))

	return trios


def generate_all_sums(trios):
	"""
	Generates a list of sums. Each one corresponding to the trio that creates
	it in the list of trios provided.
	:return: The list of sums.
	"""
	sums = []
	for trio in trios:
		sums.append(get_sum(trio[0], trio[1], trio[2]))
	return sums


def count_uniques(sums):
	"""
	:return: An integer indicating the amount of unique numbers in the list provided.
	"""
	return len(list(set(sums)))


def main():
	trios = generate_all_trios()
	sums = generate_all_sums(trios)
	print "Amount of unique numbers below {0} that can be generated by" \
		  " the sum of 1 square, 1 cube and 1 fourth of prime numbers is" \
		  " {1}".format(LIMIT, count_uniques(sums))


if __name__ == '__main__':
	main()